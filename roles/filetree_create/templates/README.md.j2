# {{ gitlab_project }}


## Description

This repository give us a place to maintain a control versions of the every object in an Ansible Automation Controller.

CasC (Configuration as Code)  means the posibility of define every object of Ansible Automation Controller as code in a git repository. In this lab, we have defined two environments (dev and pro) to do the CasC and interact with a gitops approach between them.

## Steps to test the CasC approach
### Day-Zero from CLI

Before using CasC as a GitOps approach, it is needed to launch an initialization from CLI which it is called Day-Zero.

1. Clone the repository and create a new day-zero branch

  ```
  git clone {{ gitlab_api_url | regex_replace('http://|https://','git@') }}/{{ gitlab_group }}/{{ gitlab_subgroup }}/{{ gitlab_project }}.git

  cd {{ gitlab_project }}/

  git checkout -b casc-dev-day0
  ```

2. Edit credentials to connect to the controller for day zero.

  ```
  vi group_vars/dev/configure_connection_controller_credentials.yml
  vi group_vars/pro/configure_connection_controller_credentials.yml
  ansible-vault encrypt group_vars/dev/configure_connection_controller_credentials.yml group_vars/pro/configure_connection_controller_credentials.yml
  ```

3. Edit credentials for day zero

  ```
  vi orgs_vars/{{ gitlab_project }}/env/dev/controller_credentials.d/controller_credentials.yml
  ansible-vault encrypt orgs_vars/{{ gitlab_project }}/env/dev/controller_credentials.d/*

  vi orgs_vars/{{ gitlab_project }}/env/pro/controller_credentials.d/controller_credentials.yml
  ansible-vault encrypt orgs_vars/{{ gitlab_project }}/env/pro/controller_credentials.d/*
  ```

4. Check the inventory file. Example:

  ```
  [dev]
  {{ controller_dev }}

  [pro]
  {{ controller_pro }}
  ```

5. Setting vault credential file

  ```
  echo "my_vault_pass" > ~/.vault_password
  ln ~/.vault_password .
  export ANSIBLE_VAULT_PASSWORD_FILE=.vault_password
  ```

6. Launch ansible-navigator from CLI to setup day-zero of CasC. Example (it is needed to change the Execution Environment)

  ```
  podman login {{ automation_hub }}

  ansible-navigator run config-controller-filetree.yml -i inventory -l dev -e '{orgs: {{ gitlab_project }}, dir_orgs_vars: orgs_vars, env: dev}' -m stdout --eei {{ automation_hub }}/ee-casc

  ansible-navigator run config-controller-filetree.yml -i inventory -l pro -e '{orgs: {{ gitlab_project }}, dir_orgs_vars: orgs_vars, env: pro}' -m stdout --eei {{ automation_hub }}/ee-casc
  ```
7. Push the changes

  ```
  git status -s
  git add -A
  git commit -m "CasC day zero"
  git push origin casc-dev-day0
  ```
8. Configure the webhooks for both environments: DEV and PRO.

 > **_NOTE:_** You can use the playbook *********** or do it manually:

 AUTOMATICALLY WITH A PLAYBOOK:

  ```
  ansible-navigator run
  ```

 MANUALLY IN DEV (only if you didn't by the playbook):

 1. Go to Dev Controller and open {{ gitlab_project }} CasC_AAP_Workflow
 2. Copy the content of "Webhook URL" and "Webhook Key"
 3. Go to Gitlab -> Settings -> Webhooks
 4. Paste the content of "Webhook URL" and "Webhook Key" in the gaps "URL" and "Secret Content"
 5. Select Push events and fill the gap with dev

 ![pusheventdev](pusheventdev.png)

 MANUALLY IN PRO (only if you didn't by the playbook):

 1. Go to PRO Controller and open {{ gitlab_project }} CasC_AAP_Workflow
 2. Copy the content of "Webhook URL" and "Webhook Key"
 3. Go to Gitlab -> Settings -> Webhooks
 4. Paste the content of "Webhook URL" and "Webhook Key" in the gaps "URL" and "Secret Content"
 5. Select Tag events and fill the gap with dev

 ![pusheventdev](tageventpro.png)




### GitOps flow

1.

2.

3.

4.

5.

6.
